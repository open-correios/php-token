<?php
/**
 * Token
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenCorreios
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Token
 *
 * ServiÃ§o de token para acesso das APIs
 *
 * The version of the OpenAPI document: 1.8.5
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenCorreios\Model;

use ArrayAccess;
use DateTime;
use InvalidArgumentException;
use JsonSerializable;
use OpenCorreios\ObjectSerializer;

/**
 * Token Class Doc Comment
 *
 * @category Class
 * @package  OpenCorreios
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Token implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;
    public const AMBIENTE_PRODUCAO = 'PRODUCAO';
    public const AMBIENTE_HOMOLOGACAO = 'HOMOLOGACAO';
    public const AMBIENTE_DESENVOLVIMENTO = 'DESENVOLVIMENTO';
    public const AMBIENTE_LOCAL = 'LOCAL';
    public const PERFIL_S = 'S';
    public const PERFIL_A = 'A';
    public const PERFIL_PJ = 'PJ';
    public const PERFIL_PF = 'PF';
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'Token';
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'ambiente' => 'string',
        'id' => 'string',
        'perfil' => 'string',
        'cnpj' => 'string',
        'pjInternacional' => 'int',
        'cpf' => 'string',
        'cie' => 'string',
        'cartaoPostagem' => '\OpenCorreios\Model\CartaoPostagem',
        'api' => 'int[]',
        'ip' => 'string',
        'emissao' => '\DateTime',
        'expiraEm' => '\DateTime',
        'zoneOffset' => 'string',
        'token' => 'string'
    ];
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'ambiente' => null,
        'id' => null,
        'perfil' => null,
        'cnpj' => null,
        'pjInternacional' => 'int64',
        'cpf' => null,
        'cie' => null,
        'cartaoPostagem' => null,
        'api' => 'int32',
        'ip' => null,
        'emissao' => 'date-time',
        'expiraEm' => 'date-time',
        'zoneOffset' => null,
        'token' => null
    ];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ambiente' => 'ambiente',
        'id' => 'id',
        'perfil' => 'perfil',
        'cnpj' => 'cnpj',
        'pjInternacional' => 'pjInternacional',
        'cpf' => 'cpf',
        'cie' => 'cie',
        'cartaoPostagem' => 'cartaoPostagem',
        'api' => 'api',
        'ip' => 'ip',
        'emissao' => 'emissao',
        'expiraEm' => 'expiraEm',
        'zoneOffset' => 'zoneOffset',
        'token' => 'token'
    ];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ambiente' => 'setAmbiente',
        'id' => 'setId',
        'perfil' => 'setPerfil',
        'cnpj' => 'setCnpj',
        'pjInternacional' => 'setPjInternacional',
        'cpf' => 'setCpf',
        'cie' => 'setCie',
        'cartaoPostagem' => 'setCartaoPostagem',
        'api' => 'setApi',
        'ip' => 'setIp',
        'emissao' => 'setEmissao',
        'expiraEm' => 'setExpiraEm',
        'zoneOffset' => 'setZoneOffset',
        'token' => 'setToken'
    ];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ambiente' => 'getAmbiente',
        'id' => 'getId',
        'perfil' => 'getPerfil',
        'cnpj' => 'getCnpj',
        'pjInternacional' => 'getPjInternacional',
        'cpf' => 'getCpf',
        'cie' => 'getCie',
        'cartaoPostagem' => 'getCartaoPostagem',
        'api' => 'getApi',
        'ip' => 'getIp',
        'emissao' => 'getEmissao',
        'expiraEm' => 'getExpiraEm',
        'zoneOffset' => 'getZoneOffset',
        'token' => 'getToken'
    ];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ambiente'] = $data['ambiente'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['perfil'] = $data['perfil'] ?? null;
        $this->container['cnpj'] = $data['cnpj'] ?? null;
        $this->container['pjInternacional'] = $data['pjInternacional'] ?? null;
        $this->container['cpf'] = $data['cpf'] ?? null;
        $this->container['cie'] = $data['cie'] ?? null;
        $this->container['cartaoPostagem'] = $data['cartaoPostagem'] ?? null;
        $this->container['api'] = $data['api'] ?? null;
        $this->container['ip'] = $data['ip'] ?? null;
        $this->container['emissao'] = $data['emissao'] ?? null;
        $this->container['expiraEm'] = $data['expiraEm'] ?? null;
        $this->container['zoneOffset'] = $data['zoneOffset'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAmbienteAllowableValues();
        if (!is_null($this->container['ambiente']) && !in_array($this->container['ambiente'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ambiente', must be one of '%s'",
                $this->container['ambiente'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPerfilAllowableValues();
        if (!is_null($this->container['perfil']) && !in_array($this->container['perfil'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'perfil', must be one of '%s'",
                $this->container['perfil'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAmbienteAllowableValues()
    {
        return [
            self::AMBIENTE_PRODUCAO,
            self::AMBIENTE_HOMOLOGACAO,
            self::AMBIENTE_DESENVOLVIMENTO,
            self::AMBIENTE_LOCAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPerfilAllowableValues()
    {
        return [
            self::PERFIL_S,
            self::PERFIL_A,
            self::PERFIL_PJ,
            self::PERFIL_PF,
        ];
    }

    /**
     * Gets ambiente
     *
     * @return string|null
     */
    public function getAmbiente()
    {
        return $this->container['ambiente'];
    }

    /**
     * Sets ambiente
     *
     * @param string|null $ambiente ambiente
     *
     * @return self
     */
    public function setAmbiente($ambiente)
    {
        $allowedValues = $this->getAmbienteAllowableValues();
        if (!is_null($ambiente) && !in_array($ambiente, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ambiente', must be one of '%s'",
                    $ambiente,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ambiente'] = $ambiente;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets perfil
     *
     * @return string|null
     */
    public function getPerfil()
    {
        return $this->container['perfil'];
    }

    /**
     * Sets perfil
     *
     * @param string|null $perfil perfil
     *
     * @return self
     */
    public function setPerfil($perfil)
    {
        $allowedValues = $this->getPerfilAllowableValues();
        if (!is_null($perfil) && !in_array($perfil, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'perfil', must be one of '%s'",
                    $perfil,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['perfil'] = $perfil;

        return $this;
    }

    /**
     * Gets cnpj
     *
     * @return string|null
     */
    public function getCnpj()
    {
        return $this->container['cnpj'];
    }

    /**
     * Sets cnpj
     *
     * @param string|null $cnpj cnpj
     *
     * @return self
     */
    public function setCnpj($cnpj)
    {
        $this->container['cnpj'] = $cnpj;

        return $this;
    }

    /**
     * Gets pjInternacional
     *
     * @return int|null
     */
    public function getPjInternacional()
    {
        return $this->container['pjInternacional'];
    }

    /**
     * Sets pjInternacional
     *
     * @param int|null $pjInternacional pjInternacional
     *
     * @return self
     */
    public function setPjInternacional($pjInternacional)
    {
        $this->container['pjInternacional'] = $pjInternacional;

        return $this;
    }

    /**
     * Gets cpf
     *
     * @return string|null
     */
    public function getCpf()
    {
        return $this->container['cpf'];
    }

    /**
     * Sets cpf
     *
     * @param string|null $cpf cpf
     *
     * @return self
     */
    public function setCpf($cpf)
    {
        $this->container['cpf'] = $cpf;

        return $this;
    }

    /**
     * Gets cie
     *
     * @return string|null
     */
    public function getCie()
    {
        return $this->container['cie'];
    }

    /**
     * Sets cie
     *
     * @param string|null $cie cie
     *
     * @return self
     */
    public function setCie($cie)
    {
        $this->container['cie'] = $cie;

        return $this;
    }

    /**
     * Gets cartaoPostagem
     *
     * @return CartaoPostagem|null
     */
    public function getCartaoPostagem()
    {
        return $this->container['cartaoPostagem'];
    }

    /**
     * Sets cartaoPostagem
     *
     * @param CartaoPostagem|null $cartaoPostagem cartaoPostagem
     *
     * @return self
     */
    public function setCartaoPostagem($cartaoPostagem)
    {
        $this->container['cartaoPostagem'] = $cartaoPostagem;

        return $this;
    }

    /**
     * Gets api
     *
     * @return int[]|null
     */
    public function getApi()
    {
        return $this->container['api'];
    }

    /**
     * Sets api
     *
     * @param int[]|null $api api
     *
     * @return self
     */
    public function setApi($api)
    {
        $this->container['api'] = $api;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip ip
     *
     * @return self
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets emissao
     *
     * @return DateTime|null
     */
    public function getEmissao()
    {
        return $this->container['emissao'];
    }

    /**
     * Sets emissao
     *
     * @param DateTime|null $emissao emissao
     *
     * @return self
     */
    public function setEmissao($emissao)
    {
        $this->container['emissao'] = $emissao;

        return $this;
    }

    /**
     * Gets expiraEm
     *
     * @return DateTime|null
     */
    public function getExpiraEm()
    {
        return $this->container['expiraEm'];
    }

    /**
     * Sets expiraEm
     *
     * @param DateTime|null $expiraEm expiraEm
     *
     * @return self
     */
    public function setExpiraEm($expiraEm)
    {
        $this->container['expiraEm'] = $expiraEm;

        return $this;
    }

    /**
     * Gets zoneOffset
     *
     * @return string|null
     */
    public function getZoneOffset()
    {
        return $this->container['zoneOffset'];
    }

    /**
     * Sets zoneOffset
     *
     * @param string|null $zoneOffset zoneOffset
     *
     * @return self
     */
    public function setZoneOffset($zoneOffset)
    {
        $this->container['zoneOffset'] = $zoneOffset;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
